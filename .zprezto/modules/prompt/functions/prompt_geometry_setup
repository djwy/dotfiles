# Based on Geometry
# https://github.com/frmendes/geometry

PROMPT_SYMBOL='▲'
EXIT_VALUE_SYMBOL="%{%F{red}%}△%f"
RPROMPT_SYMBOL='◇'

GIT_DIRTY="%{%F{red}%}⬡%f"
GIT_CLEAN="%{%F{green}%}⬢%f"
GIT_REBASE="\uE0A0"
GIT_UNPULLED="⇣"
GIT_UNPUSHED="⇡"

GIT_STAGED="%{%F{cyan}%}+"
GIT_MODIFIED="%{%F{yellow}%}~"
GIT_DELETED="%{%F{red}%}-"
GIT_NEW="%{%F{magenta}%}…%f"

VI_MODE_COMMAND="%{%F{magenta}%}<#%f"
VI_MODE_INSERT="%{%F{blue}%}$>%f"

zle -N zle-line-init
zle -N zle-keymap-select

function prompt_geometry_git_branch {
  ref=$(git symbolic-ref --short HEAD 2> /dev/null) || \
  ref=$(git rev-parse --short HEAD 2> /dev/null) || return
  echo $ref
}

function prompt_geometry_git_dirty {
  st="$(git status --porcelain --ignore-submodules)"
  if test -z $st; then
    echo $GIT_CLEAN
  else
    staged="$(git_staged_count $st)"
    modified="$(git_modified_count $st)"
    deleted="$(git_deleted_count $st)"
    new="$(git_new_count $st)"
    echo "$staged$modified$deleted$new:: $GIT_DIRTY"
  fi
}

function git_staged_count {
  count="$(echo $1 | grep '^\w' | wc -l)"
  if test $count -ne 0; then
    echo "$GIT_STAGED${count##*( )}%f "
  fi
}

function git_modified_count {
  count="$(echo $1 | grep '^ M' | wc -l)"
  if test $count -ne 0; then
    echo "$GIT_MODIFIED${count##*( )}%f "
  fi
}

function git_deleted_count {
  count="$(echo $1 | grep '^ D' | wc -l)"
  if test $count -ne 0; then
    echo "$GIT_DELETED${count##*( )}%f "
  fi
}

function git_new_count {
  if test -n "$(echo $1 | grep '^ \??')"; then
    echo "$GIT_NEW "
  fi
}

function git_commits_ahead {
  # Return total commit count if no remote set
  if [[ $(git remote) == "" ]]; then
    echo $(git rev-list --all --count)
    return
  fi
  if [[ $(git rev-parse --abbrev-ref @"{u}" 2>/dev/null) == "" ]]; then
    return
  fi
  count=$(git rev-list --count @"{u}"..)
  if test $count -ne 0; then
    echo $count 
  fi
}

function git_commits_behind {
  count=$(git rev-list --count ..@"{u}")
  if test $count -ne 0; then
    echo $count 
  fi
}

function prompt_geometry_git_rebase_check {
  git_dir=$(git rev-parse --git-dir)
  if test -d "$git_dir/rebase-merge" -o -d "$git_dir/rebase-apply"; then
    echo "$GIT_REBASE"
  fi
}

function prompt_geometry_git_remote_check {
  local_commit=$(git rev-parse @ 2>&1)
  remote_commit=$(git rev-parse @"{u}" 2>&1)
  common_base=$(git merge-base @ @"{u}" 2>&1) # last common commit

  if [[ $local_commit == $remote_commit ]]; then
    echo ""
  else
    if [[ $common_base == $remote_commit ]]; then
      echo "$GIT_UNPUSHED$(git_commits_ahead)"
    elif [[ $common_base == $local_commit ]]; then
      echo "$GIT_UNPULLED$(git_commits_behind)"
    else
      echo "$GIT_UNPUSHED$(git_commits_ahead) $GIT_UNPULLED$(git_commits_behind)"
    fi
  fi
}

function prompt_geometry_git_symbol {
  echo "$(prompt_geometry_git_rebase_check) $(prompt_geometry_git_remote_check) "
}

function prompt_geometry_git_info {
  if git rev-parse --git-dir > /dev/null 2>&1; then
    echo "$(prompt_geometry_git_symbol)%F{242}$(prompt_geometry_git_branch)%f :: $(prompt_geometry_git_dirty)"
  fi
}

function zle-line-init zle-keymap-select {
  prompt_geometry_render
  zle reset-prompt
}

function vi_mode_prompt_info {
  if [[ "$KEYMAP" == 'vicmd' ]]
  then
    echo "$VI_MODE_COMMAND"
  else
    echo "$VI_MODE_INSERT"
  fi
}

function prompt_geometry_print_title {
  print -n '\e]0;'
  print -Pn $1
  print -n '\a'
}

# Show current command in title
function prompt_geometry_set_cmd_title {
  prompt_geometry_print_title "${2} @ %m"
}

# Prevent command showing on title after ending
function prompt_geometry_set_title {
  prompt_geometry_print_title '%~'
}

function prompt_geometry_render {
  PROMPT="%(?.$PROMPT_SYMBOL.$EXIT_VALUE_SYMBOL) %{%F{yellow}%}%3~%f $(vi_mode_prompt_info)%f "

  PROMPT2=" $RPROMPT_SYMBOL "
  RPROMPT="$(prompt_geometry_git_info)"
}

function prompt_geometry_setup {
  autoload -U add-zsh-hook

  add-zsh-hook preexec prompt_geometry_set_cmd_title
  add-zsh-hook precmd prompt_geometry_set_title
  add-zsh-hook precmd prompt_geometry_render
}

prompt_geometry_setup
